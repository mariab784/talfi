package latexCode;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import javax.swing.JOptionPane;

import accesoBD.Mensajero;

import vista.vistaGrafica.Arista;
import vista.vistaGrafica.AristaAP;
import vista.vistaGrafica.AristaTuring;
import vista.vistaGrafica.AutomataCanvas;
import vista.vistaGrafica.CurvedArrow;
import vista.vistaGrafica.Estado;
import vista.vistaGrafica.PanelCentral;


import modelo.AutomatasException;
import modelo.algoritmos.Registro;

import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.sun.org.apache.xerces.internal.parsers.DOMParser;

import accesoBD.Mensajero;

import vista.vistaGrafica.Arista;
import vista.vistaGrafica.AristaAP;
import vista.vistaGrafica.AristaTuring;
import vista.vistaGrafica.AutomataCanvas;
import vista.vistaGrafica.CurvedArrow;
import vista.vistaGrafica.Estado;
import vista.vistaGrafica.PanelCentral;

public class LatexCodeConverter {

	private static LatexCodeConverter lc;
	private PanelCentral p;	 
	private int xIni1;
	private int xIni2;
	private int yIni;
	private String latex;
	private String latex2;
	private String latex3;
	private Mensajero mensajero;
	private char upDown;
	private int contador;
	private String blanco;
	private String lambda;
	
	public LatexCodeConverter(PanelCentral panel){
		
		p = panel;
		latex = "";
		latex2= "";
		latex3 = "";
		upDown = '^';
		mensajero = Mensajero.getInstancia();
		blanco = mensajero.devuelveMensaje("simbolos.blanco",4);
		lambda = mensajero.devuelveMensaje("simbolos.lambda",4);
		contador = 0;

	}
	
	/**
	 * lc es un Singleton por tanto contiene una instancia de si mismo
	 * y aqui la devuelve de forma estatica
	 * @return Mensajero instancia de Mensajero para la aplicaciÃ±n
	 */
	public static LatexCodeConverter getInstancia(PanelCentral panel){ 
		if(lc==null) lc = new LatexCodeConverter(panel);
		return lc;
	}
	
	public void convertir(){
		generaCodigo();
	}
	
	private void generaCodigo(){
		
		
		contador++;
		AutomataCanvas c = p.getCanvas();
        int numEst = c.getListaEstados().size();
        int numAristas;
        String nombreEstado;
        String tipoAuto = null;
        int coorX;
        int coorY;
        int k = 1;
        int xOrigen;
        int yOrigen;
        int xDestino;
        int yDestino;
        String etiqueta;
        char com = '\"';
        /*String*/ latex = "% LaTeX code with xy-package\n%Generated by Rocio Barrigüete, Mario Huete\n" +
        "\\documentclass[12pt]{article}\n" +
        "\\input xy\n" +
        "\\xyoption{all}\n" +
        "\\usepackage[all, knot]{xy}\n" +
        "\\xyoption{arc}\n" +
        "\\begin{document}\n\n" +
        "\\[\n" +
        "\\xy\n";
        for(int i = 0; i < numEst; i++){
            nombreEstado = c.getListaEstados().get(i).getEtiqueta();
            coorX = (Math.abs(c.getListaEstados().get(i).getX())*160)/842;
            coorY = (c.getListaEstados().get(i).getY()*160)/783;
            latex = latex + "("+coorX+","+coorY+")*{"+nombreEstado+"};\n";
        }
        for(int i = 0; i < numEst; i++){
            nombreEstado = c.getListaEstados().get(i).getEtiqueta();
            coorX = (Math.abs(c.getListaEstados().get(i).getX())*160)/842;
            coorY = (c.getListaEstados().get(i).getY()*160)/783;
            if(nombreEstado.equals(c.getEstadoInicial())){
                latex = latex + "("+coorX+","+coorY+")*\\xycircle(5.00,5.00){}="+com+nombreEstado+com+";\n";
                xIni1 = coorX-10;
                xIni2 = coorX-5;
                yIni = coorY;
            }
            else if(c.getListaFinales().contains(nombreEstado)){
                latex = latex + "("+coorX+","+coorY+")*\\xycircle(5.00,5.00){--}="+com+nombreEstado+com+";\n";
            }
            else {

                latex = latex + "("+coorX+","+coorY+")*\\xycircle(5.00,5.00){}="+com+nombreEstado+com+";\n";
            }
        }
        latex = latex + "\\ar@{=>}("+xIni1+","+yIni+")*{}; ("+xIni2+","+yIni+")*{}\n";
        /*\ar@/^1pc/^{a}(5,0)*{};(15,0)*{}
        \ar@/^2pc/^{a}(-3,4)*{};(4,3)*{}   %//XXX para loop ^o _ en 2pc*/
        tipoAuto  = p.getPanel().getTipoAutomata();
        desmarcarAristas(tipoAuto);
        
        if((tipoAuto.equals("AutomataFD"))||(tipoAuto.equals("AutomataFND"))||(tipoAuto.equals("AutomataFNDLambda"))){
        	numAristas = c.getListaAristas().size();
/*        	for(int j = 0; j < numAristas; j++){
                if(c.getListaAristas().get(j).getOrigen().equals(c.getListaAristas().get(j).getDestino())){
                    k = 2;
                    upDown = '_';
                }
                else {
                    k = 1;
                    upDown = '^';
                }
                xOrigen = (Math.abs(c.getListaAristas().get(j).getX())*160)/842;
                yOrigen = (c.getListaAristas().get(j).getY()*160)/783;
                xDestino = (Math.abs(c.getListaAristas().get(j).getFx())*160)/842;
                yDestino = (c.getListaAristas().get(j).getFy()*160)/783;
                etiqueta = c.getListaAristas().get(j).getEtiqueta();
                if(Math.abs(yOrigen-yDestino) > 30){
                	if(yOrigen > yDestino){
                		yOrigen = yOrigen - 5;
                		yDestino = yDestino + 5;
                	}
                	else {
                		yOrigen = yOrigen + 5;
                		yDestino = yDestino - 5;
                	}
                }
                else {
                	if(xOrigen < xDestino){
                		xOrigen = xOrigen + 5;
                		xDestino = xDestino - 5;
                	}
                	else {
                		xOrigen = xOrigen - 5;
                		xDestino = xDestino + 5;
                	}
                }
                latex = latex + "\\ar@/"+upDown+k+"pc/"+upDown+"{"+etiqueta+"}("+xOrigen+
                        ","+yOrigen+")*{};("+xDestino+","+yDestino+")*{}\n";
            }*/
        	
        	ArrayList<Arista> listaAristas = c.getListaAristas();
    		Iterator<Arista> itArist= listaAristas.iterator();
    		int j = 0;
    		while(itArist.hasNext()) {
    			Arista a=itArist.next();

    			boolean noPintar=false;
    			etiqueta=a.getEtiqueta();
    			
    			String repetida=seRepite(listaAristas,a);
    			if (repetida!=null) {
    				if (repetida.equals("yaesta")) {
    					noPintar=true;
    				}
    				etiqueta=repetida;
    			}
    			
   				if(c.getListaAristas().get(j).getOrigen().equals(c.getListaAristas().get(j).getDestino())){
   					k = 2;
                    upDown = '_';
                }
                else {
                    k = 1;
                    upDown = '^';
                }
    				  					
    		    xOrigen = (Math.abs(c.getListaAristas().get(j).getX())*160)/842;
    		    yOrigen = (c.getListaAristas().get(j).getY()*160)/783;
    		    xDestino = (Math.abs(c.getListaAristas().get(j).getFx())*160)/842;
    		    yDestino = (c.getListaAristas().get(j).getFy()*160)/783;
    					
    		    if(Math.abs(yOrigen-yDestino) > 30){
    		       	if(yOrigen > yDestino){
    		       		yOrigen = yOrigen - 5;
    		       		yDestino = yDestino + 5;
    		       	}
    		       	else {
    		       		yOrigen = yOrigen + 5;
    		       		yDestino = yDestino - 5;
    		       	}
    		    }
    		    else {
    		      	if(xOrigen < xDestino){
    		       		xOrigen = xOrigen + 5;
    		       		xDestino = xDestino - 5;
    		      	}
    		        else {
    		        	xOrigen = xOrigen - 5;
    		            xDestino = xDestino + 5;
    		        }
    		    }          
    		            
    			if (noPintar!=true) {

    				latex = latex + "\\ar@/"+upDown+k+"pc/"+upDown+"{"+etiqueta+"}("+xOrigen+
    			                    ","+yOrigen+")*{};("+xDestino+","+yDestino+")*{}\n"; 
    			}        

    			noPintar=false;  			
    			j++;
    		}
    		
        }
        
        if(tipoAuto.equals("AutomataPila")){
			numAristas = c.getListaAristasPila().size();
			int j = 0;
			int i = 0;
			String etiquetaAux = "";// String etiqueta = "";
			AristaAP aristaT = c.getListaAristasPila().get(i);
			while (i < numAristas){
				
				if ( !aristaT.getMarcada() ){ 
					//Mensajero m=Mensajero.getInstancia();	
					String separador = mensajero.devuelveMensaje("simbolos.separador",4);
					if (etiquetaAux.equals("")){ 
						
						/*String r = aristaT.getSimboloCinta();
						if (r.equals(blanco)) r = "\\"+r;*/
						
						etiquetaAux = dameEtiqueta(aristaT.getEntradaSimbolos(),0) + separador + aristaT.getCimaPila() + separador + dameEtiqueta(aristaT.getSalidaPila(),1);
						j = i+1;
					}
				
					if (j < numAristas){ // falta llave
				
						AristaAP aux = c.getListaAristasPila().get(j);
						boolean origen,destinos;		
						destinos = aristaT.getDestino().equals( aux.getDestino());
						origen = aristaT.getOrigen().equals( aux.getOrigen());

						if (destinos && origen && !aux.getMarcada() ) {
							
							/*String r = aux.getSimboloCinta();
							if (r.equals(blanco)) r = "\\"+r;*/
							etiquetaAux += " , " + dameEtiqueta(aux.getEntradaSimbolos(),0) + separador + aux.getCimaPila() + separador + dameEtiqueta(aux.getSalidaPila(),1);
							//System.out.println("ETIKETA AUX = " + etiquetaAux);
							aux.setMarcada(true);
						//j++;
						}
					
					}
							
					if	(j >= numAristas){
						if(aristaT.getOrigen().equals(aristaT.getDestino())){
		                    k = 2;
		                    upDown = '_';
						}
						else {
							k = 1;
							upDown = '^';
						}
							
		                xOrigen = (Math.abs(c.getListaAristasPila().get(i).getX())*160)/842;
		                yOrigen = (c.getListaAristasPila().get(i).getY()*160)/783;
		                xDestino = (Math.abs(c.getListaAristasPila().get(i).getFx())*160)/842;
		                yDestino = (c.getListaAristasPila().get(i).getFy()*160)/783;
					
		                if(Math.abs(yOrigen-yDestino) > 30){
		                	if(yOrigen > yDestino){
		                		yOrigen = yOrigen - 5;
		                		yDestino = yDestino + 5;
		                	}
		                	else {
		                		yOrigen = yOrigen + 5;
		                		yDestino = yDestino - 5;
		                	}
		                }
		                else {
		                	if(xOrigen < xDestino){
		                		xOrigen = xOrigen + 5;
		                		xDestino = xDestino - 5;
		                	}
		                	else {
		                		xOrigen = xOrigen - 5;
		                		xDestino = xDestino + 5;
		                	}
		                }
			            
		                latex = latex + "\\ar@/"+upDown+k+"pc/"+upDown+"{"+etiquetaAux+"}("+(xOrigen)+
	                        ","+(yOrigen)+")*{};("+(xDestino)+","+(yDestino)+")*{}\n";
					}
				}
				
				if (j >= numAristas){ 
					i++; 
					j = i+1;  
					etiquetaAux = "";
					if (i < numAristas) 	aristaT = c.getListaAristasPila().get(i);
				}
				else j++; 
			}
        }
        if(tipoAuto.equals("MaquinaTuring")){
        	
        	
			numAristas = c.getListaAristasTuring().size();
			int j = 0;
			int i = 0;
			String etiquetaAux = "";
			AristaTuring aristaT = c.getListaAristasTuring().get(i);
			while (i < numAristas){
				
				if ( !aristaT.getMarcada() ){ 
					String separador = mensajero.devuelveMensaje("simbolos.separador",4);
					if (etiquetaAux.equals("")){ 
						
						String r = aristaT.getSimboloCinta();
						if (r.equals(blanco)) r = "\\"+r;
						
						etiquetaAux = dameEtiqueta(aristaT.getEntradaCinta(),0) + separador + r + separador + aristaT.getDireccion();
						j = i+1;
					}
				
					if (j < numAristas){ 
				
						AristaTuring aux = c.getListaAristasTuring().get(j);
						boolean origen,destinos;		
						destinos = aristaT.getDestino().equals( aux.getDestino());
						origen = aristaT.getOrigen().equals( aux.getOrigen());

						if (destinos && origen && !aux.getMarcada() ) {
							
							String r = aux.getSimboloCinta();
							if (r.equals(blanco)) r = "\\"+r;
							
							etiquetaAux += " , " + dameEtiqueta(aux.getEntradaCinta(),0) + separador + r + separador + /*dameEtiqueta(*/aux.getDireccion()/*SalidaPila())*/;
							aux.setMarcada(true);
						//j++;
						}
					
					}
							
					if	(j >= numAristas){
		
						
						//if(c.getListaAristasTuring().get(j).getOrigen().equals(c.getListaAristasTuring().get(j).getDestino()))
							
							if(aristaT.getOrigen().equals(aristaT.getDestino())){
			                    k = 2;
			                    upDown = '_';
							}
							else {
								k = 1;
								upDown = '^';
							}
							
			                xOrigen = (Math.abs(c.getListaAristasTuring().get(i).getX())*160)/842;
			                yOrigen = (c.getListaAristasTuring().get(i).getY()*160)/783;
			                xDestino = (Math.abs(c.getListaAristasTuring().get(i).getFx())*160)/842;
			                yDestino = (c.getListaAristasTuring().get(i).getFy()*160)/783;
			               // etiqueta = construyeEtiqueta(c.getListaAristasTuring());

						
			                if(Math.abs(yOrigen-yDestino) > 30){
			                	if(yOrigen > yDestino){
			                		yOrigen = yOrigen - 5;
			                		yDestino = yDestino + 5;
			                	}
			                	else {
			                		yOrigen = yOrigen + 5;
			                		yDestino = yDestino - 5;
			                	}
			                }
			                else {
			                	if(xOrigen < xDestino){
			                		xOrigen = xOrigen + 5;
			                		xDestino = xDestino - 5;
			                	}
			                	else {
			                		xOrigen = xOrigen - 5;
			                		xDestino = xDestino + 5;
			                	}
			                }
			                
			                latex = latex + "\\ar@/"+upDown+k+"pc/"+upDown+"{"+etiquetaAux+"}("+xOrigen+
	                        ","+yOrigen+")*{};("+xDestino+","+yDestino+")*{}\n";
					}
				}
				
				if (j >= numAristas){ 
					i++; 
					j = i+1;  
					etiquetaAux = "";
					if (i < numAristas) 	aristaT = c.getListaAristasTuring().get(i);
				}
				else j++; 
			}

        }
        
        latex = latex + "\n"+"\\endxy\n" +
                "\\]\n\n" +
                "\\end{document}";
       System.out.println(latex);
	   creaArchivo();
//------------------------------------------------------------------------------------------	   
//******************************************************************************************
	   class Casilla{
    	   public String stat;
    	   public int cx;
    	   public int cy;
    	   public int num;
       }
	   latex2 = "% LaTeX code with TIKz-package\n%Generated by Rocio Barrigüete, Mario Huete\n";
	   latex2 += "\\documentclass{article}\n\n"+
       "\\usepackage[T1]{fontenc}\n"+
       "\\usepackage{amsmath,amsfonts,amssymb}\n"+
       "\\usepackage{pstricks,pstricks-add,pst-node,pst-tree}\n"+
       "\\usepackage{multido}\n\n"+
       "\\begin{document}\n"+
       "\\thispagestyle{empty}\n\n"+
       "$\\psmatrix[colsep=2.5cm,rowsep=2.5cm,mnode=circle]\n";
       numEst = c.getListaEstados().size();
       ArrayList<Casilla> vector = new ArrayList<Casilla>(); 
       vector.ensureCapacity(16);
       Casilla iker = new Casilla();
       switch(numEst){
       		case 1:{
       			iker.stat = c.getListaEstados().get(0).getEtiqueta();
       			iker.cx = 2;
       			iker.cy = 2;
       			iker.num = 5;
       			vector.add(iker);
       			break;
       		}
       		case 2:{
       			iker.stat = c.getListaEstados().get(0).getEtiqueta();
       			iker.cx = 2;
       			iker.cy = 2;
       			iker.num = 5;
       			vector.add(iker);
       			
       			Casilla iker2 = new Casilla();
       			iker2.stat = c.getListaEstados().get(1).getEtiqueta();
       			iker2.cx = 2;
       			iker2.cy = 3;
       			iker2.num = 6;
       			vector.add(iker2);
       			break;
       		}
       		case 3:{
       			iker.stat = c.getListaEstados().get(0).getEtiqueta();
       			iker.cx = 2;
       			iker.cy = 2;
       			vector.add(iker);
       			
       			Casilla iker2 = new Casilla();
       			iker2.stat = c.getListaEstados().get(1).getEtiqueta();
       			iker2.cx = 2;
       			iker2.cy = 4;
       			vector.add(iker2);
       			
       			Casilla iker3 = new Casilla();
       			iker3.stat = c.getListaEstados().get(2).getEtiqueta();
       			iker3.cx = 3;
       			iker3.cy = 3;
       			vector.add(iker3);
       			break;
       		}
       		case 4:{
       			iker.stat = c.getListaEstados().get(0).getEtiqueta();
       			iker.cx = 2;
       			iker.cy = 2;
       			iker.num = 5;
       			vector.add(iker);
       			
       			Casilla iker2 = new Casilla();
       			iker2.stat = c.getListaEstados().get(1).getEtiqueta();
       			iker2.cx = 2;
       			iker2.cy = 3;
       			iker2.num = 6;
       			vector.add(iker2);
       			
       			Casilla iker3 = new Casilla();
       			iker3.stat = c.getListaEstados().get(2).getEtiqueta();
       			iker3.cx = 3;
       			iker3.cy = 2;
       			iker3.num = 9;
       			vector.add(iker3);
       			
       			Casilla iker4 = new Casilla();
       			iker4.stat = c.getListaEstados().get(3).getEtiqueta();
       			iker4.cx = 3;
       			iker4.cy = 3;
       			iker4.num = 10;
       			vector.add(iker4);
       			break;
       		}
       		case 5:{
       			iker.stat = c.getListaEstados().get(0).getEtiqueta();
       			iker.cx = 1;
       			iker.cy = 2;
       			iker.num = 1;
       			vector.add(iker);
       			
       			Casilla iker2 = new Casilla();
       			iker2.stat = c.getListaEstados().get(1).getEtiqueta();
       			iker2.cx = 1;
       			iker2.cy = 3;
       			iker2.num = 2;
       			vector.add(iker2);
       			
       			Casilla iker3 = new Casilla();
       			iker3.stat = c.getListaEstados().get(2).getEtiqueta();
       			iker3.cx = 2;
       			iker3.cy = 1;
       			iker3.num = 4;
       			vector.add(iker3);
       			
       			Casilla iker4 = new Casilla();
       			iker4.stat = c.getListaEstados().get(3).getEtiqueta();
       			iker4.cx = 2;
       			iker4.cy = 4;
       			iker4.num = 7;
       			vector.add(iker4);
       			
       			Casilla iker5 = new Casilla();
       			iker5.stat = c.getListaEstados().get(4).getEtiqueta();
       			iker5.cx = 3;
       			iker5.cy = 2;
       			iker5.num = 9;
       			vector.add(iker5);
       			break;
       		}
       		case 6:{
       			iker.stat = c.getListaEstados().get(0).getEtiqueta();
       			iker.cx = 1;
       			iker.cy = 2;
       			iker.num = 1;
       			vector.add(iker);
       			
       			Casilla iker2 = new Casilla();
       			iker2.stat = c.getListaEstados().get(1).getEtiqueta();
       			iker2.cx = 1;
       			iker2.cy = 3;
       			iker2.num = 2;
       			vector.add(iker2);
       			
       			Casilla iker3 = new Casilla();
       			iker3.stat = c.getListaEstados().get(2).getEtiqueta();
       			iker3.cx = 2;
       			iker3.cy = 1;
       			iker3.num = 4;
       			vector.add(iker3);
       			
       			Casilla iker4 = new Casilla();
       			iker4.stat = c.getListaEstados().get(3).getEtiqueta();
       			iker4.cx = 2;
       			iker4.cy = 4;
       			iker4.num = 7;
       			vector.add(iker4);
       			
       			Casilla iker5 = new Casilla();
       			iker5.stat = c.getListaEstados().get(4).getEtiqueta();
       			iker5.cx = 3;
       			iker5.cy = 2;
       			iker5.num = 9;
       			vector.add(iker5);
       			
       			Casilla iker6 = new Casilla();
       			iker6.stat = c.getListaEstados().get(5).getEtiqueta();
       			iker6.cx = 3;
       			iker6.cy = 3;
       			iker6.num = 10;
       			vector.add(iker6);
       			break;
       		}
       		case 7:{
       			iker.stat = c.getListaEstados().get(0).getEtiqueta();
       			iker.cx = 1;
       			iker.cy = 2;
       			iker.num = 1;
       			vector.add(iker);
       			
       			Casilla iker2 = new Casilla();
       			iker2.stat = c.getListaEstados().get(1).getEtiqueta();
       			iker2.cx = 1;
       			iker2.cy = 3;
       			iker2.num = 2;
       			vector.add(iker2);
       			
       			Casilla iker3 = new Casilla();
       			iker3.stat = c.getListaEstados().get(2).getEtiqueta();
       			iker3.cx = 2;
       			iker3.cy = 1;
       			iker3.num = 4;
       			vector.add(iker3);
       			
       			Casilla iker4 = new Casilla();
       			iker4.stat = c.getListaEstados().get(3).getEtiqueta();
       			iker4.cx = 2;
       			iker4.cy = 4;
       			iker4.num = 7;
       			vector.add(iker4);
       			
       			Casilla iker5 = new Casilla();
       			iker5.stat = c.getListaEstados().get(4).getEtiqueta();
       			iker5.cx = 3;
       			iker5.cy = 2;
       			iker5.num = 9;
       			vector.add(iker5);
       			
       			Casilla iker6 = new Casilla();
       			iker6.stat = c.getListaEstados().get(5).getEtiqueta();
       			iker6.cx = 3;
       			iker6.cy = 3;
       			iker6.num = 10;
       			vector.add(iker6);
       			
       			Casilla iker7 = new Casilla();
       			iker7.stat = c.getListaEstados().get(6).getEtiqueta();
       			iker7.cx = 3;
       			iker7.cy = 4;
       			iker7.num = 11;
       			vector.add(iker7);
       			break;
       		}
       		case 8:{
       			iker.stat = c.getListaEstados().get(0).getEtiqueta();
       			iker.cx = 1;
       			iker.cy = 2;
       			iker.num = 1;
       			vector.add(iker);
       			
       			Casilla iker2 = new Casilla();
       			iker2.stat = c.getListaEstados().get(1).getEtiqueta();
       			iker2.cx = 1;
       			iker2.cy = 3;
       			iker2.num = 2;
       			vector.add(iker2);
       			
       			Casilla iker3 = new Casilla();
       			iker3.stat = c.getListaEstados().get(2).getEtiqueta();
       			iker3.cx = 2;
       			iker3.cy = 1;
       			iker3.num = 4;
       			vector.add(iker3);
       			
       			Casilla iker4 = new Casilla();
       			iker4.stat = c.getListaEstados().get(3).getEtiqueta();
       			iker4.cx = 2;
       			iker4.cy = 4;
       			iker4.num = 7;
       			vector.add(iker4);
       			
       			Casilla iker5 = new Casilla();
       			iker5.stat = c.getListaEstados().get(4).getEtiqueta();
       			iker5.cx = 3;
       			iker5.cy = 1;
       			iker5.num = 8;
       			vector.add(iker5);
       			
       			Casilla iker6 = new Casilla();
       			iker6.stat = c.getListaEstados().get(5).getEtiqueta();
       			iker6.cx = 3;
       			iker6.cy = 4;
       			iker6.num = 11;
       			vector.add(iker6);
       			
       			Casilla iker7 = new Casilla();
       			iker7.stat = c.getListaEstados().get(6).getEtiqueta();
       			iker7.cx = 4;
       			iker7.cy = 2;
       			iker7.num = 13;
       			vector.add(iker7);
       			
       			Casilla iker8 = new Casilla();
       			iker8.stat = c.getListaEstados().get(7).getEtiqueta();
       			iker8.cx = 4;
       			iker8.cy = 3;
       			iker8.num = 14;
       			vector.add(iker8);
       			break;
       		}
       		case 9:{
       			iker.stat = c.getListaEstados().get(0).getEtiqueta();
       			iker.cx = 1;
       			iker.cy = 2;
       			iker.num = 1;
       			vector.add(iker);
       			
       			Casilla iker2 = new Casilla();
       			iker2.stat = c.getListaEstados().get(1).getEtiqueta();
       			iker2.cx = 1;
       			iker2.cy = 3;
       			iker2.num = 2;
       			vector.add(iker2);
       			
       			Casilla iker3 = new Casilla();
       			iker3.stat = c.getListaEstados().get(2).getEtiqueta();
       			iker3.cx = 2;
       			iker3.cy = 1;
       			iker3.num = 4;
       			vector.add(iker3);
       			
       			Casilla iker4 = new Casilla();
       			iker4.stat = c.getListaEstados().get(3).getEtiqueta();
       			iker4.cx = 2;
       			iker4.cy = 2;
       			iker4.num = 5;
       			vector.add(iker4);
       			
       			Casilla iker5 = new Casilla();
       			iker5.stat = c.getListaEstados().get(4).getEtiqueta();
       			iker5.cx = 2;
       			iker5.cy = 4;
       			iker5.num = 7;
       			vector.add(iker5);
       			
       			Casilla iker6 = new Casilla();
       			iker6.stat = c.getListaEstados().get(5).getEtiqueta();
       			iker6.cx = 3;
       			iker6.cy = 1;
       			iker6.num = 8;
       			vector.add(iker6);
       			
       			Casilla iker7 = new Casilla();
       			iker7.stat = c.getListaEstados().get(6).getEtiqueta();
       			iker7.cx = 3;
       			iker7.cy = 4;
       			iker7.num = 11;
       			vector.add(iker7);
       			
       			Casilla iker8 = new Casilla();
       			iker8.stat = c.getListaEstados().get(7).getEtiqueta();
       			iker8.cx = 4;
       			iker8.cy = 2;
       			iker8.num = 13;
       			vector.add(iker8);
       			
       			Casilla iker9 = new Casilla();
       			iker9.stat = c.getListaEstados().get(8).getEtiqueta();
       			iker9.cx = 4;
       			iker9.cy = 3;
       			iker9.num = 14;
       			vector.add(iker9);
       			break;
       		}
       		case 10:{
       			iker.stat = c.getListaEstados().get(0).getEtiqueta();
       			iker.cx = 1;
       			iker.cy = 2;
       			iker.num = 1;
       			vector.add(iker);
       			
       			Casilla iker2 = new Casilla();
       			iker2.stat = c.getListaEstados().get(1).getEtiqueta();
       			iker2.cx = 1;
       			iker2.cy = 3;
       			iker2.num = 2;
       			vector.add(iker2);
       			
       			Casilla iker3 = new Casilla();
       			iker3.stat = c.getListaEstados().get(2).getEtiqueta();
       			iker3.cx = 2;
       			iker3.cy = 1;
       			iker3.num = 4;
       			vector.add(iker3);
       			
       			Casilla iker4 = new Casilla();
       			iker4.stat = c.getListaEstados().get(3).getEtiqueta();
       			iker4.cx = 2;
       			iker4.cy = 2;
       			iker4.num = 5;
       			vector.add(iker4);
       			
       			Casilla iker5 = new Casilla();
       			iker5.stat = c.getListaEstados().get(4).getEtiqueta();
       			iker5.cx = 2;
       			iker5.cy = 4;
       			iker5.num = 7;
       			vector.add(iker5);
       			
       			Casilla iker6 = new Casilla();
       			iker6.stat = c.getListaEstados().get(5).getEtiqueta();
       			iker6.cx = 3;
       			iker6.cy = 1;
       			iker6.num = 8;
       			vector.add(iker6);
       			
       			Casilla iker7 = new Casilla();
       			iker7.stat = c.getListaEstados().get(6).getEtiqueta();
       			iker7.cx = 3;
       			iker7.cy = 3;
       			iker7.num = 10;
       			vector.add(iker7);
       			
       			Casilla iker8 = new Casilla();
       			iker8.stat = c.getListaEstados().get(7).getEtiqueta();
       			iker8.cx = 3;
       			iker8.cy = 4;
       			iker8.num = 11;
       			vector.add(iker8);
       			
       			Casilla iker9 = new Casilla();
       			iker9.stat = c.getListaEstados().get(8).getEtiqueta();
       			iker9.cx = 4;
       			iker9.cy = 2;
       			iker9.num = 13;
       			vector.add(iker9);	
       			
       			Casilla iker10 = new Casilla();
       			iker10.stat = c.getListaEstados().get(9).getEtiqueta();
       			iker10.cx = 4;
       			iker10.cy = 3;
       			iker10.num = 14;
       			vector.add(iker10);
       			break;
       		}
       	//AMPLIAR A GUSTO DEL DESARROLLADOR LA DISTRIBUCIÓN DE ESTADOS,
			//PARA AUTÓMATAS CON MAYOR NÚMERO DE ESTADOS.
       }
       int ind = 0;
       for(int m = 0; m<4; m++){
    	   for(int n = 0; n<4; n++){
    		   if(n == 3){
    		   		if((numEst!=ind)&&((vector.get(ind).cx==m+1)&&(vector.get(ind).cy==n+1))){
    		   			latex2+=vector.get(ind).stat+" \\\\\n";
    		   			ind++;
    		   		}
    		   		else
    		   			latex2+=" \\\\\n";
    		   }
    		   else{
    			   if((numEst!=ind)&&((vector.get(ind).cx==m+1)&&(vector.get(ind).cy==n+1))){
    				   latex2+=vector.get(ind).stat+" & ";
    				   ind++;
    			   }
    			   else
    				   latex2+="  & ";
    		   }
    	   }
       }
       if((tipoAuto.equals("AutomataFD"))||(tipoAuto.equals("AutomataFND"))||(tipoAuto.equals("AutomataFNDLambda"))){
       	numAristas = c.getListaAristas().size();
       	ArrayList<Arista> listaAristas = c.getListaAristas();
       	int Xorigen = 0;
       	int Yorigen = 0;
       	int Xdestino = 0;
       	int Ydestino = 0;
       	int cont = 0;
       	for(int i=0; i<numAristas; i++){
       		while(cont<numEst){
       			if(c.getListaAristas().get(i).getOrigen().equals(vector.get(cont).stat)){
       				Xorigen = vector.get(cont).cx;
       				Yorigen = vector.get(cont).cy;
       				cont++;
       			}
       			else
       				cont++;
       		}
       		cont = 0;
       		while(cont<numEst){
       			if(c.getListaAristas().get(i).getDestino().equals(vector.get(cont).stat)){
       				Xdestino = vector.get(cont).cx;
       				Ydestino = vector.get(cont).cy;
       				cont++;
       			}
       			else
       				cont++;
       		}
       		cont = 0;
       		if(c.getListaAristas().get(i).getOrigen().equals(c.getListaAristas().get(i).getDestino())){
       			latex2+="\\nccircle{->}{"+Xorigen+","+Yorigen+"}{-.5cm}_{"+
       			c.getListaAristas().get(i).getEtiqueta()+"}\n";
       		}
       		else{
       		latex2+="\\ncarc[arcangle=30]{->}{"+Xorigen+","+Yorigen+"}{"+
       				Xdestino+","+Ydestino+"}^{"+c.getListaAristas().get(i).getEtiqueta()+"}\n";
       		}
       	}
	   }
       if(tipoAuto.equals("AutomataPila")){
          	numAristas = c.getListaAristasPila().size();
          	ArrayList<AristaAP> listaAristas = c.getListaAristasPila();
          	int Xorigen = 0;
          	int Yorigen = 0;
          	int Xdestino = 0;
          	int Ydestino = 0;
          	int cont = 0;
          	for(int i=0; i<numAristas; i++){
          		while(cont<numEst){
          			if(c.getListaAristasPila().get(i).getOrigen().equals(vector.get(cont).stat)){
          				Xorigen = vector.get(cont).cx;
          				Yorigen = vector.get(cont).cy;
          				cont++;
          			}
          			else
          				cont++;
          		}
          		cont = 0;
          		while(cont<numEst){
          			if(c.getListaAristasPila().get(i).getDestino().equals(vector.get(cont).stat)){
          				Xdestino = vector.get(cont).cx;
          				Ydestino = vector.get(cont).cy;
          				cont++;
          			}
          			else
          				cont++;
          		}
          		cont = 0;
          		if(c.getListaAristasPila().get(i).getOrigen().equals(c.getListaAristasPila().get(i).getDestino())){
          			latex2+="\\nccircle{->}{"+Xorigen+","+Yorigen+"}{-.5cm}_{"+
          			c.getListaAristasPila().get(i).getEntradaSimbolos()+"/"+
	          			c.getListaAristasPila().get(i).getCimaPila()+"/"+
	          			c.getListaAristasPila().get(i).getSalidaPila()+"}\n";
          		}
          		else{
          		latex2+="\\ncarc[arcangle=30]{->}{"+Xorigen+","+Yorigen+"}{"+
          				Xdestino+","+Ydestino+"}^{"+
          				c.getListaAristasPila().get(i).getEntradaSimbolos()+"/"+
	          			c.getListaAristasPila().get(i).getCimaPila()+"/"+
	          			c.getListaAristasPila().get(i).getSalidaPila()+"}\n";
          		}
          	}
   	   }
       if(tipoAuto.equals("MaquinaTuring")){
         	numAristas = c.getListaAristasTuring().size();
         	ArrayList<AristaTuring> listaAristas = c.getListaAristasTuring();
         	int Xorigen = 0;
         	int Yorigen = 0;
         	int Xdestino = 0;
         	int Ydestino = 0;
         	int cont = 0;
         	for(int i=0; i<numAristas; i++){
         		while(cont<numEst){
         			if(c.getListaAristasTuring().get(i).getOrigen().equals(vector.get(cont).stat)){
         				Xorigen = vector.get(cont).cx;
         				Yorigen = vector.get(cont).cy;
         				cont++;
         			}
         			else
         				cont++;
         		}
         		cont = 0;
         		while(cont<numEst){
         			if(c.getListaAristasTuring().get(i).getDestino().equals(vector.get(cont).stat)){
         				Xdestino = vector.get(cont).cx;
         				Ydestino = vector.get(cont).cy;
         				cont++;
         			}
         			else
         				cont++;
         		}
         		cont = 0;
         		if(c.getListaAristasTuring().get(i).getOrigen().equals(c.getListaAristasTuring().get(i).getDestino())){
         			latex2+="\\nccircle{->}{"+Xorigen+","+Yorigen+"}{-.5cm}_{"+
         			c.getListaAristasTuring().get(i).getEntradaCinta()+"/"+
          			c.getListaAristasTuring().get(i).getSimboloCinta()+"/"+
          			c.getListaAristasTuring().get(i).getDireccion()+"}\n";
         		}
         		else{
         		latex2+="\\ncarc[arcangle=30]{->}{"+Xorigen+","+Yorigen+"}{"+
         				Xdestino+","+Ydestino+"}^{"+
         				c.getListaAristasTuring().get(i).getEntradaCinta()+"/"+
	          			c.getListaAristasTuring().get(i).getSimboloCinta()+"/"+
	          			c.getListaAristasTuring().get(i).getDireccion()+"}\n";
         		}
         	}
  	   }
       latex2+="\\endpsmatrix$\n"+
                "\\end{document}";
       System.out.println(latex2);
       creaArchivo2();
//******************************************************************************************
//******************************************************************************************	    
	   latex3 = "% LaTeX code with TIKz-package\n%Generated by Rocio Barrigüete, Mario Huete\n";
	   latex3 += "\\documentclass{article}\n" +
       "\\usepackage{pgf}\n"+
       "\\usepackage{tikz}\n"+
       "\\usetikzlibrary{arrows,automata,positioning}\n"+
       "\\usepackage[latin1]{inputenc}\n"+
       "\\begin{document}\n"+
       "\\begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=4cm,semithick]\n"+
       "\\tikzstyle{every state}=[fill=yellow,text=black]\n\n";
	   numEst = c.getListaEstados().size();
	   String iniciall = "";
	   String finall = "";
	   String localizar="";
	   int cont = 0;
	   ArrayList<String> posiciones = damePosiciones(numEst,c.getListaEstados());
	   if(numEst==1){
		   if(c.getListaFinales().contains(c.getListaEstados().get(0))){
			   finall=",double";
		   }
		   if(c.getEstadoInicial().equals(c.getListaEstados().get(0).getEtiqueta())){
			   iniciall=",initial";
		   }
		   latex3+="\\node[state"+iniciall+finall+"] ("+c.getListaEstados().get(0).getEtiqueta()+") {$"+c.getListaEstados().get(0).getEtiqueta()+"$};\n";
		   iniciall="";
		   finall="";
	   }
	   else{
		   if(c.getListaFinales().contains(c.getListaEstados().get(0).getEtiqueta())){
			   finall=",double";
		   }
		   if(c.getEstadoInicial().equals(c.getListaEstados().get(0).getEtiqueta())){
			   iniciall=",initial";
		   }
		   latex3+="\\node[state"+iniciall+finall+"] ("+c.getListaEstados().get(0).getEtiqueta()+") {$"+c.getListaEstados().get(0).getEtiqueta()+"$};\n";
		   iniciall="";
		   finall="";
		   for(int i=1; i<numEst; i++){
			   if(c.getListaFinales().contains(c.getListaEstados().get(i).getEtiqueta())){
				   finall=",double";
			   }
			   if(c.getEstadoInicial().equals(c.getListaEstados().get(i).getEtiqueta())){
				   iniciall=",initial";
			   }
			   localizar = ","+posiciones.get(i-1);
			   latex3+="\\node[state"+iniciall+finall+localizar+"] ("+c.getListaEstados().get(i).getEtiqueta()+") {$"+c.getListaEstados().get(i).getEtiqueta()+"$};\n";
			   cont++;
			   iniciall="";
			   finall="";
			   localizar="";
		   }
		   if((tipoAuto.equals("AutomataFD"))||(tipoAuto.equals("AutomataFND"))||(tipoAuto.equals("AutomataFNDLambda"))){
	        	numAristas = c.getListaAristas().size();
	        	ArrayList<Arista> listaAristas = c.getListaAristas();
	        	latex3+="\n";
	        	latex3+="\\path\n";
	        	for(int i=0; i<numAristas; i++){
	        		if(c.getListaAristas().get(i).getOrigen().equals(c.getListaAristas().get(i).getDestino())){
	        			latex3+="("+c.getListaAristas().get(i).getOrigen()+") edge [loop below] node {"+
      		          			c.getListaAristas().get(i).getEtiqueta()+"} ("+
      		          			c.getListaAristas().get(i).getDestino()+")\n";
	        		}
	        		else {
	        			latex3+="("+c.getListaAristas().get(i).getOrigen()+") edge [bend left] node {"+
	        		          	c.getListaAristas().get(i).getEtiqueta()+"} ("+
	        		          	c.getListaAristas().get(i).getDestino()+")\n";
	        		}
	        	}
	        	latex3+=";\n";
		   }
		   if(tipoAuto.equals("AutomataPila")){
			   latex3+="\n\\path\n";
			   desmarcarAristas(tipoAuto);
				numAristas = c.getListaAristasPila().size();
				int j = 0;
				int i = 0;
				String etiquetaAux = "";// String etiqueta = "";
				AristaAP aristaT = c.getListaAristasPila().get(i);
				while (i < numAristas){
					
					if ( !aristaT.getMarcada() ){ 
						//Mensajero m=Mensajero.getInstancia();	
						String separador = mensajero.devuelveMensaje("simbolos.separador",4);
						if (etiquetaAux.equals("")){ 
							
							/*String r = aristaT.getSimboloCinta();
							if (r.equals(blanco)) r = "\\"+r;*/
							
							etiquetaAux = dameEtiqueta(aristaT.getEntradaSimbolos(),0) + separador + aristaT.getCimaPila() + separador + dameEtiqueta(aristaT.getSalidaPila(),1);
							j = i+1;
						}
					
						if (j < numAristas){ // falta llave
					
							AristaAP aux = c.getListaAristasPila().get(j);
							boolean origen,destinos;		
							destinos = aristaT.getDestino().equals( aux.getDestino());
							origen = aristaT.getOrigen().equals( aux.getOrigen());

							if (destinos && origen && !aux.getMarcada() ) {
								
								/*String r = aux.getSimboloCinta();
								if (r.equals(blanco)) r = "\\"+r;*/
								etiquetaAux += " , " + dameEtiqueta(aux.getEntradaSimbolos(),0) + separador + aux.getCimaPila() + separador + dameEtiqueta(aux.getSalidaPila(),1);
								//System.out.println("ETIKETA AUX = " + etiquetaAux);
								aux.setMarcada(true);
							//j++;
							}
						
						}
								
						if	(j >= numAristas){
							/*if(aristaT.getOrigen().equals(aristaT.getDestino())){
			                    k = 2;
			                    upDown = '_';
							}
							else {
								k = 1;
								upDown = '^';
							}*/
								
			               /* xOrigen = (Math.abs(c.getListaAristasPila().get(i).getX())*160)/842;
			                yOrigen = (c.getListaAristasPila().get(i).getY()*160)/783;
			                xDestino = (Math.abs(c.getListaAristasPila().get(i).getFx())*160)/842;
			                yDestino = (c.getListaAristasPila().get(i).getFy()*160)/783;
						
			                if(Math.abs(yOrigen-yDestino) > 30){
			                	if(yOrigen > yDestino){
			                		yOrigen = yOrigen - 5;
			                		yDestino = yDestino + 5;
			                	}
			                	else {
			                		yOrigen = yOrigen + 5;
			                		yDestino = yDestino - 5;
			                	}
			                }
			                else {
			                	if(xOrigen < xDestino){
			                		xOrigen = xOrigen + 5;
			                		xDestino = xDestino - 5;
			                	}
			                	else {
			                		xOrigen = xOrigen - 5;
			                		xDestino = xDestino + 5;
			                	}
			                }*/
				            
			                /*latex3 += latex + "\\ar@/"+upDown+k+"pc/"+upDown+"{"+etiquetaAux+"}("+(xOrigen)+
		                        ","+(yOrigen)+")*{};("+(xDestino)+","+(yDestino)+")*{}\n"*/;
		                    /****************************************/
		                        String temp = "";
		                        //etiquetaAux=etiquetaAux.replaceAll("\\","/");
		                        etiquetaAux=etiquetaAux.replace("\\lambda", "$\\lambda$");
		                        if(c.getListaAristasPila().get(i).getOrigen().equals(c.getListaAristasPila().get(i).getDestino())){
		                        	temp="("+c.getListaAristasPila().get(i).getOrigen()+") edge [loop below] node {"+
		                       		etiquetaAux+"} ("+
	 		          			c.getListaAristasPila().get(i).getDestino()+")\n";
		        				
		        				
		        				
		                        }
		                        else{
		                        	
		                        	//etiquetaAux=etiquetaAux.replaceAll("\\","/");
		                        	temp+="("+c.getListaAristasPila().get(i).getOrigen()+") edge [bend left] node {"+
		                        	etiquetaAux+"} ("+
		    	        		          	c.getListaAristasPila().get(i).getDestino()+")\n";
		                        	
			        				
			        				
		                        }
		                        latex3+=temp;
		                        
		                        
		                        
		                        
			                /***************************************/
						}
					}
					
					if (j >= numAristas){ 
						i++; 
						j = i+1;  
						etiquetaAux = "";
						if (i < numAristas) 	aristaT = c.getListaAristasPila().get(i);
					}
					else j++; 
				}
				latex3+=";\n";

		   }
		   if(tipoAuto.equals("MaquinaTuring")){
			   latex3+="\n\\path\n";
			   desmarcarAristas(tipoAuto);
				numAristas = c.getListaAristasTuring().size();
				int j = 0;
				int i = 0;
				String etiquetaAux = "";// String etiqueta = "";
				AristaTuring aristaT = c.getListaAristasTuring().get(i);
				while (i < numAristas){
					
					if ( !aristaT.getMarcada() ){ 
						//Mensajero m=Mensajero.getInstancia();	
						String separador = mensajero.devuelveMensaje("simbolos.separador",4);
						if (etiquetaAux.equals("")){ 
							
							/*String r = aristaT.getSimboloCinta();
							if (r.equals(blanco)) r = "\\"+r;*/
							
							etiquetaAux = dameEtiqueta(aristaT.getEntradaCinta(),0) + separador + aristaT.getSimboloCinta() + separador + aristaT.getDireccion();
							j = i+1;
						}
					
						if (j < numAristas){ // falta llave
					
							AristaTuring aux = c.getListaAristasTuring().get(j);
							boolean origen,destinos;		
							destinos = aristaT.getDestino().equals( aux.getDestino());
							origen = aristaT.getOrigen().equals( aux.getOrigen());

							if (destinos && origen && !aux.getMarcada() ) {
								
								/*String r = aux.getSimboloCinta();
								if (r.equals(blanco)) r = "\\"+r;*/
								etiquetaAux += " , " + dameEtiqueta(aux.getEntradaCinta(),0) + separador + aux.getSimboloCinta() + separador + aux.getDireccion();
								//System.out.println("ETIKETA AUX = " + etiquetaAux);
								aux.setMarcada(true);
							//j++;
							}
						
						}
								
						if	(j >= numAristas){
							/*if(aristaT.getOrigen().equals(aristaT.getDestino())){
			                    k = 2;
			                    upDown = '_';
							}
							else {
								k = 1;
								upDown = '^';
							}*/
								
			               /* xOrigen = (Math.abs(c.getListaAristasPila().get(i).getX())*160)/842;
			                yOrigen = (c.getListaAristasPila().get(i).getY()*160)/783;
			                xDestino = (Math.abs(c.getListaAristasPila().get(i).getFx())*160)/842;
			                yDestino = (c.getListaAristasPila().get(i).getFy()*160)/783;
						
			                if(Math.abs(yOrigen-yDestino) > 30){
			                	if(yOrigen > yDestino){
			                		yOrigen = yOrigen - 5;
			                		yDestino = yDestino + 5;
			                	}
			                	else {
			                		yOrigen = yOrigen + 5;
			                		yDestino = yDestino - 5;
			                	}
			                }
			                else {
			                	if(xOrigen < xDestino){
			                		xOrigen = xOrigen + 5;
			                		xDestino = xDestino - 5;
			                	}
			                	else {
			                		xOrigen = xOrigen - 5;
			                		xDestino = xDestino + 5;
			                	}
			                }*/
				            
			                /*latex3 += latex + "\\ar@/"+upDown+k+"pc/"+upDown+"{"+etiquetaAux+"}("+(xOrigen)+
		                        ","+(yOrigen)+")*{};("+(xDestino)+","+(yDestino)+")*{}\n"*/;
		                    /****************************************/
		                        String temp = "";
		                        //etiquetaAux=etiquetaAux.replaceAll("\\","/");
		                       // etiquetaAux=etiquetaAux.replace("#", "\\#");
		                        if(c.getListaAristasTuring().get(i).getOrigen().equals(c.getListaAristasTuring().get(i).getDestino())){
		                        	temp="("+c.getListaAristasTuring().get(i).getOrigen()+") edge [loop below] node {"+
		                       		etiquetaAux+"} ("+
	 		          			c.getListaAristasTuring().get(i).getDestino()+")\n";
		        				
		        				
		        				
		                        }
		                        else{
		                        	
		                        	//etiquetaAux=etiquetaAux.replaceAll("\\","/");
		                        	temp+="("+c.getListaAristasTuring().get(i).getOrigen()+") edge [bend left] node {"+
		                        	etiquetaAux+"} ("+
		    	        		          	c.getListaAristasTuring().get(i).getDestino()+")\n";
		                        	
			        				
			        				
		                        }
		                        latex3+=temp;
		                        
		                        
		                        
		                        
			                /***************************************/
						}
					}
					
					if (j >= numAristas){ 
						i++; 
						j = i+1;  
						etiquetaAux = "";
						if (i < numAristas) 	aristaT = c.getListaAristasTuring().get(i);
					}
					else j++; 
				}
				latex3+=";\n";
		   }
		   
	   }
	   latex3+="\\end{tikzpicture}\n"+
              "\\end{document}";
	   System.out.println(latex3);
	   creaArchivo3();
	}
/********************************dame etiqueta para tikz*********************************/
	private String dameetiqueta(ArrayList<AristaAP> listaAristas, AristaAP actual){
		
		String etiquetaAux="";
		int numAristas = listaAristas.size();
		//int j = 0;
		int i = 0;
		//String etiquetaAux = "";// String etiqueta = "";
		//AristaAP aristaT = listaAristas.get(i);
		String separador = mensajero.devuelveMensaje("simbolos.separador",4);
	/*	etiquetaAux= dameEtiqueta(actual.getEntradaSimbolos(),0) + separador + actual.getCimaPila() 
		+ separador + dameEtiqueta(actual.getSalidaPila(),1);*/

		while (i < numAristas){
			
			if ( !actual.getMarcada() ){
				//Mensajero m=Mensajero.getInstancia();	
				/*String */separador = mensajero.devuelveMensaje("simbolos.separador",4);
				if (etiquetaAux.equals("") ){ 
					
					/*String r = aristaT.getSimboloCinta();
					if (r.equals(blanco)) r = "\\"+r;*/
					
					etiquetaAux = dameEtiqueta(actual.getEntradaSimbolos(),0) + separador + 
					actual.getCimaPila() + separador + dameEtiqueta(actual.getSalidaPila(),1);
				//	j = i+1;
				}
			
				if (/*j*/i < numAristas){ // falta llave
			
					AristaAP aux = listaAristas.get(/*j*/i);
					boolean origen,destinos;		
					destinos = actual.getDestino().equals( aux.getDestino());
					origen = actual.getOrigen().equals( aux.getOrigen());

					if (destinos && origen && !aux.getMarcada() ) {
						
						/*String r = aux.getSimboloCinta();
						if (r.equals(blanco)) r = "\\"+r;*/
						etiquetaAux += " , " + dameEtiqueta(aux.getEntradaSimbolos(),0) + separador + aux.getCimaPila() + separador + dameEtiqueta(aux.getSalidaPila(),1);
						//System.out.println("ETIKETA AUX = " + etiquetaAux);
						aux.setMarcada(true);
					//j++;
					}
				
				}
						
				if	(/*j*/i >= numAristas){
				/*	if(actual.getOrigen().equals(actual.getDestino())){
	                    k = 2;
	                    upDown = '_';
					}
					else {
						k = 1;
						upDown = '^';
					}*/
						
	           /*     xOrigen = (Math.abs(c.getListaAristasPila().get(i).getX())*160)/842;
	                yOrigen = (c.getListaAristasPila().get(i).getY()*160)/783;
	                xDestino = (Math.abs(c.getListaAristasPila().get(i).getFx())*160)/842;
	                yDestino = (c.getListaAristasPila().get(i).getFy()*160)/783;
				
	                if(Math.abs(yOrigen-yDestino) > 30){
	                	if(yOrigen > yDestino){
	                		yOrigen = yOrigen - 5;
	                		yDestino = yDestino + 5;
	                	}
	                	else {
	                		yOrigen = yOrigen + 5;
	                		yDestino = yDestino - 5;
	                	}
	                }
	                else {
	                	if(xOrigen < xDestino){
	                		xOrigen = xOrigen + 5;
	                		xDestino = xDestino - 5;
	                	}
	                	else {
	                		xOrigen = xOrigen - 5;
	                		xDestino = xDestino + 5;
	                	}
	                }*/
		            
	             /*   latex = latex + "\\ar@/"+upDown+k+"pc/"+upDown+"{"+etiquetaAux+"}("+(xOrigen)+
                        ","+(yOrigen)+")*{};("+(xDestino)+","+(yDestino)+")*{}\n";*/
				}
			}
			
	/*		if (j >= numAristas){ 
				i++; 
				j = i+1;  
				etiquetaAux = "";
				if (i < numAristas) 	aristaT = c.getListaAristasPila().get(i);
			}
			else */ i++; 
		}
		return etiquetaAux;
	}
	
	
//*****************************************************************************************	
	public ArrayList<String> damePosiciones(int numEstados,ArrayList<Estado> estados){
		ArrayList<String> posiciones = new ArrayList<String>();
		posiciones.ensureCapacity(numEstados-1);
		switch(numEstados){
			case 2:{
				posiciones.add(0,"right of="+estados.get(0).getEtiqueta());
				break;
			}
			case 3:{
				posiciones.add(0,"right of="+estados.get(0).getEtiqueta());
				posiciones.add(1,"below of="+estados.get(0).getEtiqueta());
				break;
			}
			case 4:{
				posiciones.add(0,"right of="+estados.get(0).getEtiqueta());
				posiciones.add(1,"below of="+estados.get(0).getEtiqueta());
				posiciones.add(2,"below of="+estados.get(1).getEtiqueta());
				break;
			}
			case 5:{
				posiciones.add(0,"below left of="+estados.get(0).getEtiqueta());
				posiciones.add(1,"below right of="+estados.get(0).getEtiqueta());
				posiciones.add(2,"below right of="+estados.get(1).getEtiqueta());
				posiciones.add(3,"below of="+estados.get(1).getEtiqueta());
				break;
			}
			case 6:{
				posiciones.add(0,"below left of="+estados.get(0).getEtiqueta());
				posiciones.add(1,"below right of="+estados.get(0).getEtiqueta());
				posiciones.add(2,"below of="+estados.get(1).getEtiqueta());
				posiciones.add(3,"below of="+estados.get(2).getEtiqueta());
				posiciones.add(4,"below right of="+estados.get(3).getEtiqueta());
				break;
			}
			case 7:{
				posiciones.add(0,"right of="+estados.get(0).getEtiqueta());
				posiciones.add(1,"right of="+estados.get(1).getEtiqueta());
				posiciones.add(2,"below of="+estados.get(1).getEtiqueta());
				posiciones.add(3,"below left of="+estados.get(3).getEtiqueta());
				posiciones.add(4,"below right of="+estados.get(3).getEtiqueta());
				posiciones.add(5,"below of="+estados.get(3).getEtiqueta());
				break;
			}
			case 8:{
				posiciones.add(0,"right of="+estados.get(0).getEtiqueta());
				posiciones.add(1,"right of="+estados.get(1).getEtiqueta());
				posiciones.add(2,"below of="+estados.get(0).getEtiqueta());
				posiciones.add(3,"below of="+estados.get(2).getEtiqueta());
				posiciones.add(4,"below of="+estados.get(3).getEtiqueta());
				posiciones.add(5,"right of="+estados.get(5).getEtiqueta());
				posiciones.add(6,"below of="+estados.get(4).getEtiqueta());
				break;
			}
			case 9:{
				posiciones.add(0,"below left of="+estados.get(0).getEtiqueta());
				posiciones.add(1,"below right of="+estados.get(0).getEtiqueta());
				posiciones.add(2,"below of="+estados.get(1).getEtiqueta());
				posiciones.add(3,"right of="+estados.get(3).getEtiqueta());
				posiciones.add(4,"right of="+estados.get(4).getEtiqueta());
				posiciones.add(5,"below of="+estados.get(3).getEtiqueta());
				posiciones.add(6,"below of="+estados.get(5).getEtiqueta());
				posiciones.add(7,"below right of="+estados.get(6).getEtiqueta());
				break;
			}
			case 10:{
				posiciones.add(0,"right of="+estados.get(0).getEtiqueta());
				posiciones.add(1,"right of="+estados.get(1).getEtiqueta());
				posiciones.add(2,"below of="+estados.get(0).getEtiqueta());
				posiciones.add(3,"below of="+estados.get(1).getEtiqueta());
				posiciones.add(4,"below of="+estados.get(2).getEtiqueta());
				posiciones.add(5,"below of="+estados.get(3).getEtiqueta());
				posiciones.add(6,"below of="+estados.get(4).getEtiqueta());
				posiciones.add(7,"below of="+estados.get(5).getEtiqueta());
				posiciones.add(8,"below of="+estados.get(7).getEtiqueta());
				break;
			}
			case 11:{
				posiciones.add(0,"right of="+estados.get(0).getEtiqueta());
				posiciones.add(1,"right of="+estados.get(1).getEtiqueta());
				posiciones.add(2,"below of="+estados.get(0).getEtiqueta());
				posiciones.add(3,"below of="+estados.get(1).getEtiqueta());
				posiciones.add(4,"below of="+estados.get(2).getEtiqueta());
				posiciones.add(5,"below of="+estados.get(3).getEtiqueta());
				posiciones.add(6,"below of="+estados.get(4).getEtiqueta());
				posiciones.add(7,"below of="+estados.get(5).getEtiqueta());
				posiciones.add(8,"below of="+estados.get(7).getEtiqueta());
				posiciones.add(9,"below of="+estados.get(6).getEtiqueta());
				break;
			}
			case 12:{
				posiciones.add(0,"right of="+estados.get(0).getEtiqueta());
				posiciones.add(1,"right of="+estados.get(1).getEtiqueta());
				posiciones.add(2,"below of="+estados.get(0).getEtiqueta());
				posiciones.add(3,"below of="+estados.get(1).getEtiqueta());
				posiciones.add(4,"below of="+estados.get(2).getEtiqueta());
				posiciones.add(5,"below of="+estados.get(3).getEtiqueta());
				posiciones.add(6,"below of="+estados.get(4).getEtiqueta());
				posiciones.add(7,"below of="+estados.get(5).getEtiqueta());
				posiciones.add(8,"below of="+estados.get(7).getEtiqueta());
				posiciones.add(9,"below of="+estados.get(6).getEtiqueta());
				posiciones.add(10,"below of="+estados.get(8).getEtiqueta());
				break;
			//AMPLIAR A GUSTO DEL DESARROLLADOR LA DISTRIBUCIÓN DE ESTADOS,
				//PARA AUTÓMATAS CON MAYOR NÚMERO DE ESTADOS.
			}
			default: return null;
		}
		return posiciones;
	}
//*****************************************************************************************	
//*****************************************************************************************	
	private boolean esUnica(Arista a) {
		// TODO Auto-generated method stub
		Iterator<Arista> itArist=p.getCanvas().getListaAristas().iterator();
		while(itArist.hasNext()) {
			Arista b=itArist.next();
			if (!a.equals(b)) {
				if (a.getX()==b.getFx()&&(a.getY()==b.getFy())&&(a.getFx()==b.getX())&&(a.getFy()==b.getY())) return false;
			}
		}
		return true;
	}
	
	private String seRepite(ArrayList<Arista> la, Arista a) {
		//Iterator<Arista> it=la.iterator();
		String repetida=a.getEtiqueta();
		int i=0;
		while(i<la.size()) {
			Arista aux=la.get(i);
			if ((a.getDestino().equals(aux.getDestino()))&&(a.getOrigen().equals(aux.getOrigen()))&&(!a.getEtiqueta().equals(aux.getEtiqueta()))) {
				if (aux.getMarcada()) return "yaesta";
				repetida+=","+aux.getEtiqueta();
			}
			i++;
		}
		if (repetida.contains(",")) {
			a.setMarcada(true);
			return repetida;
		}
		a.setMarcada(false);
		return null;
	}
	
	// 0 para simbolos, 1 para transicion de pila
	private String dameEtiqueta(ArrayList<String> a, int tipo){
	
		String s = " ";
		Iterator<String> it = a.iterator();
		
		
		while (it.hasNext()){
			String r = it.next();
			if (r.equals(blanco)) r = "\\"+r;
			if (r.equals(lambda)) r = "\\lambda";
			if (tipo == 0 && it.hasNext())
				r+=",";
			//else r+=
			s += r;
		}
		s += " ";
		return s;
	}
	
	
	
	private void creaArchivo(){
		
	    try {
	    	// Apertura del fichero y creacion de BufferedReader para poder
	        // hacer una lectura comoda (disponer del metodo readLine()).
    		
    		PrintWriter pw = null;
    		String ruta = "LaTeX/"+"CLaTeX"+contador+".tex";
    		FileWriter fichero = new FileWriter(ruta);
			pw = new PrintWriter(fichero);

            pw.println(latex);
            muestraTex(ruta);
            pw.close();
	    }

    	catch(Exception e){
    		e.printStackTrace();
    	}
	}
	
	private void creaArchivo2(){
		
	    try {
	    	// Apertura del fichero y creacion de BufferedReader para poder
	        // hacer una lectura comoda (disponer del metodo readLine()).
    		
    		PrintWriter pw = null;
    		String ruta = "LaTeX/"+"LaTeXPSM"+contador+".tex";
    		FileWriter fichero = new FileWriter(ruta);
			pw = new PrintWriter(fichero);

            pw.println(latex2);
            muestraTex(ruta);
            pw.close();
	    }

    	catch(Exception e){
    		e.printStackTrace();
    	}
	}
	
	private void creaArchivo3(){
		
	    try {
	    	// Apertura del fichero y creacion de BufferedReader para poder
	        // hacer una lectura comoda (disponer del metodo readLine()).
    		
    		PrintWriter pw = null;
    		String ruta = "LaTeX/"+"LaTeXTIKz"+contador+".tex";
    		FileWriter fichero = new FileWriter(ruta);
			pw = new PrintWriter(fichero);

            pw.println(latex3);
            muestraTex(ruta);
            pw.close();
	    }

    	catch(Exception e){
    		e.printStackTrace();
    	}
	}
	
	private void desmarcarAristas(String tipo){
		
		ArrayList<?> la = null;
		
		
		if(tipo.equals("AutomataPila")){

				la = p.getCanvas().getListaAristasPila();
			
		}
		else if(tipo.equals("MaquinaTuring")){la = p.getCanvas().getListaAristasTuring();}
		else{la = p.getCanvas().getListaAristas();}
		Iterator<?>/*<AristaObject>*/ it=la.iterator();
		while(it.hasNext()) {
			/*Arista*/Object aux=it.next();
			if (aux instanceof Arista)((Arista)aux).setMarcada(false);
			else if (aux instanceof AristaAP)((AristaAP)aux).setMarcada(false);
			if (aux instanceof AristaTuring)((AristaTuring)aux).setMarcada(false);
		}
		
	}
	
	
	public void muestraTex(String ruta){
		
			Mensajero m= mensajero;
			String url=ruta;
			String osName = System.getProperty("os.name");
		      try {
		         if (osName.startsWith("Mac OS")) {
		            Class<?> fileMgr = Class.forName("com.apple.eio.FileManager");
		            Method openURL = fileMgr.getDeclaredMethod("openURL",
		               new Class[] {String.class});
		            openURL.invoke(null, new Object[] {url});
		            }
		         else if (osName.startsWith("Windows"))
		            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + url);
		         else { //assume Unix or Linux
		            String[] browsers = {"TeXnicsCenter", "TeXworks", "Winedt","Kile"};
		            String browser = null;
		            for (int count = 0; count < browsers.length && browser == null; count++)
		               if (Runtime.getRuntime().exec(
		                     new String[] {"which", browsers[count]}).waitFor() == 0)
		                  browser = browsers[count];
		            if (browser == null) {
		            	JOptionPane.showMessageDialog(null,m.devuelveMensaje("vista.navegador", 2),"Error",JOptionPane.ERROR_MESSAGE);
		            } else {
		               Runtime.getRuntime().exec(new String[] {browser, url});
		            }
		         }
		      }
		      catch (Exception e) {
		    	  JOptionPane.showMessageDialog(null,m.devuelveMensaje("vista.ejecucion", 2),"Error",JOptionPane.ERROR_MESSAGE);
		      }
		
	}
	
	@SuppressWarnings("unchecked")
	public void traducirPasosMinimizacion(String ruta){
		
		Mensajero mensajero=Mensajero.getInstancia();
		DOMParser parser = new DOMParser(); 
		String brr=new Character((char)92).toString();
		String rutaHTML=System.getProperty("user.dir")+brr+"LaTeX"+brr+"Minimizacion"+brr+"MinimizacionLatex.tex";
		File fichero = new File (rutaHTML);
		BufferedWriter bw;
		
		
		try {
			parser.parse(new InputSource(new FileInputStream(ruta)));
			Document documento = parser.getDocument();
			
			bw = new BufferedWriter(new FileWriter(fichero));
			
			String formato ="\\documentclass[a4paper,11pt]{article}\n" + 
				     "\\usepackage[latin1]{inputenc}\n" +
				     "\\usepackage{ulem}\n" +
				     "\\usepackage{a4wide}\n" + 
				     "\\usepackage[dvipsnames,svgnames]{xcolor}\n" +
				     "\\usepackage[pdftex]{graphicx}\n" + 
				     "\\usepackage{hyperref}\n" +
				     "\\usepackage{array}\n"+
			        "\n" +
				     "\\newcommand{\\MYp}[1]{ {\\color[rgb]{0.392,0.392,0.392}#1} }\n" +
				     "\\newcommand{\\MYunder}[1]{ {\\color[rgb]{0.2,0.209,0.3}\\underline{#1}} }\n" +
					 "\n" +
					 "\\begin{document}\n" +
					 "\n" +  
				     "\\includegraphics{fdi.jpg}\n"+
				     "\\newline\n"+
				     "\\newline\n"+
				     "\\newline\n" +
				     "\\MYp{\\Huge " + mensajero.devuelveMensaje("simplificacionGICs.aent", 2)+ "}\n"+
				     "\\begin{center}\n" +
				     "\\includegraphics[width=\\textwidth]{imagenEntrada.jpg}\n"+
				     "\\end{center}\n";
			
					bw.append(formato);

			
			//GENERACIÃ±N DE LOS PASOS DE MINIMIZACION
			bw.append(mensajero.devuelveMensaje("minimizacion.input",3));// alt='Input'></p>");
			HashMap<String,HashMap<String,Registro>> tabla=new HashMap<String,HashMap<String,Registro>>();
			
			NodeList nodos1 = documento.getElementsByTagName("table");
			
			
		
			for (int i = 0; i < nodos1.item(0).getChildNodes().getLength(); i++) {
				NodeList nodos2=nodos1.item(0).getChildNodes().item(i).getChildNodes();
				HashMap<String,Registro> hs=new HashMap<String,Registro>();
				for(int j=0;j<nodos2.getLength();j++) {
					if (nodos2.item(j).getChildNodes().item(1)!=null) {
						Registro r = new Registro("0",true,"ninguno");
						if (!(nodos2.item(j).getChildNodes().item(1).getTextContent().equals("null"))) {
							if (nodos2.item(j).getChildNodes().item(1).getTextContent().equals("false")) {
								r.setMarcado(false);
								r.setEstados(nodos2.item(j).getChildNodes().item(3).getTextContent());
								r.setPaso(nodos2.item(j).getChildNodes().item(2).getTextContent());
								hs.put(nodos2.item(j).getChildNodes().item(0).getTextContent(),r);
							}
							else {
								hs.put(nodos2.item(j).getChildNodes().item(0).getTextContent(),r);
							}
						}
					}
				}
				tabla.put(nodos2.item(0).getTextContent(), hs);
				}
			
			
			//ordenar lista estados hashmap!!!!!!  
			ArrayList<String> listaOrdenada=new ArrayList<String>();
			Iterator<String> itKeys=tabla.keySet().iterator();
			if (itKeys.hasNext()) {
				String primera=itKeys.next();
				listaOrdenada.add(primera);
			}
			while(itKeys.hasNext()) {
				String clave=itKeys.next();
				int j=0;
				boolean listo=false;
				ArrayList<String> listaOrdenadaAux=(ArrayList<String>) listaOrdenada.clone();
				while(j<listaOrdenada.size()&&(!listo)) {
					String actual=listaOrdenada.get(j);
					int actualVal=tabla.get(actual).keySet().size();
					int claveVal=tabla.get(clave).keySet().size();
					if (claveVal>actualVal) {
						listaOrdenadaAux.add(j, clave);
						listo=true;
					}
					j++;
				}
				listaOrdenada=listaOrdenadaAux;
				if (!listo) listaOrdenada.add(clave);
			}
			
			
			Iterator<String> itEst=listaOrdenada.iterator();
			int tamanotabla = listaOrdenada.size();
			bw.append("{\\bf "+mensajero.devuelveMensaje("minimizacion.steps",3)+"}\n"+
			"\\noindent\\begin{center}\n\\newpage\n \\begin{tabular}{");
			String formato2 ="||c";
			for(int i = 1;i< tamanotabla;i++){
				formato2+="||m{1.2cm}";
			}
			
			bw.append(formato2+ "||}\\hline\n");// m{15cm} }\n");
			
			ArrayList<String> lEstadosAux=(ArrayList<String>) listaOrdenada.clone();
			
			if (itEst.hasNext()) itEst.next();
			while(itEst.hasNext()) {
				String linea = "";
				int numtd = 0;
				String estado=itEst.next();
				//bw.append("<tr><th>"+estado.subSequence(0, estado.length()-1)+"</th>");
				linea+= "<td>"+estado.subSequence(0, estado.length()-1) + " " +"</td>";// + "&";
				numtd++;
			/*	bw.append(
						//"<tr><th>"+estado.subSequence(0, estado.length()-1)+"</th>"
						estado.subSequence(0, estado.length()-1) + " "
				);*/
				Iterator<String> itEst2=lEstadosAux.iterator();
				while(itEst2.hasNext()) {
					String val=itEst2.next();
					HashMap<String,Registro> ths=tabla.get(val);
					if (ths.get(estado)!=null) {
						if (ths.get(estado).getMarcado()){ 
							// bw.append("<td> </td>");
							linea+= "<td> </td>"; //" & &";
							numtd++;
							/*bw.append("  & "/*"<td> </td>"*///); 
						}
						else{
						/*bw.append("<td>"+ths.get(estado).getPaso() +" "+
								ths.get(estado).getEstados() + "</td>");*/	
							
						/*	bw.append(" " + ths.get(estado).getEstados() + " & "/*"<td>"+ths.get(estado).getPaso() +" "+
								ths.get(estado).getEstados() + "</td>"*///);
		//bw.append("<td>"+ths.get(estado).getPaso() +" "+	ths.get(estado).getEstados() + "</td>");
							linea +=  "<td>"+ths.get(estado).getPaso() +" "+ths.get(estado).getEstados() + "</td>";
							numtd++;
						}
					}
				}
			//	bw.append(/*"</tr>"*/"\\\\ \\hline \n");
				
				linea=linea.replaceAll("</td><td>", "&");
				
				if(numtd == tamanotabla-1){
					linea=linea.replaceAll("</td>", "& \\\\\\\\ \\\\hline \n");
				}
				else if(numtd < tamanotabla-1){
					linea=linea.replaceAll("</td>", "&");
					for(int i = numtd; i < tamanotabla-1; i++){
						linea+=" &";
					}
					linea+=" \\\\ \\hline \n";
				}
				else linea=linea.replaceAll("</td>", "\\\\\\\\ \\\\hline \n");
				
				linea=linea.replaceAll("<td>", "");
				
				bw.append(linea /*+ "\\\\ \\hline \n"*/);
			}
			itEst=listaOrdenada.iterator();
			//bw.append(/*"<tr><td></td>"*/"//\n");
		//	bw.append(/*"<tr><td></td>"*/" \\\\ \\hline \n");
			String linea2=" & ";
			while(itEst.hasNext()) {
				String estado=itEst.next();
				if (itEst.hasNext()){
					//bw.append("<td>"+estado.subSequence(0, estado.length()-1)+"</td>");	
				/*	bw.append(
							/*"<tr><th>"+estado.subSequence(0, estado.length()-1)+"</th>"*/
					/*		estado.subSequence(0, estado.length()-1) + " & "
					);*/
					//bw.append("<td>"+estado.subSequence(0, estado.length()-1)+"</td>");
					
					if(itEst.hasNext()){
						linea2+= "<td>"+estado.subSequence(0, estado.length()-1)+"</td>";
					}
				}
			}
			
			
			linea2=linea2.replaceAll("</td><td>", "&");
			
			linea2=linea2.replaceAll("</td>", "\\\\\\\\ \\\\hline\n");
			
			linea2=linea2.replaceAll("<td>", "");
			
			bw.append(/*"</tr>"*/ linea2 +"\n");/*+ "\\\\ \\hline\n"*);
			//sacar salida html
		//	bw.append("</table><p>"+mensajero.devuelveMensaje("minimizacion.title",3)+"</p><p><img src='imagen.jpg' alt='Output'></p></div>");*/
			bw.append(/*"</body></html>"*/
					
					/*"\\\\"  +*/ "\n\\end{tabular}\n"+ "\\end{center}\n"+
				"\n" + "\\begin{center}\n" + 
				
				"\\includegraphics[width=\\textwidth]{imagenSalida.jpg}" + "\n\\end{center}\n");
			bw.append(/*"</body></html>"*/"\\end{document}\n");
			bw.close();
			
			//ExpresionRegular er=new ExpresionRegularImpl(expr);
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			new AutomatasException(mensajero.devuelveMensaje("parser.noarchivo",2));
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			new AutomatasException(mensajero.devuelveMensaje("parser.sax",2));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			new AutomatasException(mensajero.devuelveMensaje("parser.entsalida",2));
		}

	}
	
	public void traducirPasosSimplificacionFNC(String ruta) throws AutomatasException{
		
		Mensajero mensajero=Mensajero.getInstancia();
		DOMParser parser = new DOMParser(); 
		String brr=new Character((char)92).toString();
		String rutaLatex=System.getProperty("user.dir")+brr+"LaTeX/FNC/"+brr+"FNC.tex";
		File fichero = new File (rutaLatex);
		BufferedWriter bw;
		PrintWriter pw = null;
		try{
			
			String contenido="";
    		FileWriter ficheroLat = new FileWriter(rutaLatex);
			pw = new PrintWriter(ficheroLat);
			
			
			parser.parse(new InputSource(new FileInputStream(ruta)));
			Document documento = parser.getDocument();
			
			bw = new BufferedWriter(new FileWriter(fichero));
			
			NodeList nodos1 = null;
			nodos1 = documento.getElementsByTagName("cabecera");
			contenido+=nodos1.item(0).getChildNodes().item(0).getTextContent();
			
			nodos1 = documento.getElementsByTagName("oculto");

			contenido+="\n"+ mensajero.devuelveMensaje("formatos.ocultar",5)+"{";
	
			for(int i =0; i < nodos1.getLength(); i++){
				NodeList noculto = nodos1.item(i).getChildNodes();

				contenido+="\\MYp{\\Huge " + 
				noculto.item(0).getChildNodes().item(0).getTextContent() + "}\n" + "\\newline\n";
				//contenido+=noculto.item(1).getTextContent()+ "\n";
				
				int tam = noculto.item(1).getChildNodes().getLength();
				
				contenido+="\\begin{center}"+"\\begin{tabular}{ m{15cm} }\n\n"+
				/*"\\hline*/"\n";
				for(int j = 0; j < tam; j++){
					
					contenido+= noculto.item(1).getChildNodes().item(j).getTextContent() + " \\\\" +"\n";
				}
				
				contenido+=/*"\\hline*/"\n"+"\\end{tabular}\n"+"\\end{center}\n";
				
			} 
			 contenido+="}\n";
			/***************************************************************************************/
			 contenido+=mensajero.devuelveMensaje("formatos.cabecerados",5);
			 
			
			
			
			/*NodeList*/ nodos1 = documento.getElementsByTagName("step");
			
			contenido+="\\MYp{\\Huge "+nodos1.item(0).getChildNodes().item(0).getTextContent()
			+"\\newline\n"+ "\\newline\n"+"}\n";
			
			int tam = nodos1.item(0).getChildNodes().item(1).getChildNodes().getLength();
			System.out.println("tam filas: " + tam);
			
			contenido+="\\begin{center}"+"\\begin{tabular}{ m{15cm} }\n\n"+
			/*"\\hline*/"\n";
			for(int j = 0; j < tam; j++){
				
				contenido+= nodos1.item(0).getChildNodes().item(1).getChildNodes().item(j).getTextContent() + " \\\\" +"\n";
			}
			
			contenido+=/*"\\hline*/"\n"+"\\end{tabular}\n"+"\\end{center}";
			
			
			
			contenido+="\\newpage\n";
			
			for(int i =1; i < nodos1.getLength(); i++){
				NodeList noculto = nodos1.item(i).getChildNodes();
				
				if(nodos1.item(i).getChildNodes().getLength() >1){					
					contenido+="\\MYp{\\Huge " + 
					noculto.item(0).getChildNodes().item(0).getTextContent() + "}\n" + "\\newline\n";
					//contenido+=noculto.item(1).getTextContent()+ "\n";
					
					int tamano = noculto.item(1).getChildNodes().getLength();
					
					contenido+="\\begin{center}"+"\\begin{tabular}{ m{15cm} }\n\n"+
					/*"\\hline*/"\n";
					for(int j = 0; j < tamano; j++){
						
						contenido+= noculto.item(1).getChildNodes().item(j).getTextContent() + " \\\\" +"\n";
					}
					
					contenido+=/*"\\hline*/"\n"+"\\end{tabular}\n"+"\\end{center}\n";
					
				}
				else{
					contenido+="\\MYp{\\Huge " + 
					noculto.item(0).getChildNodes().item(0).getTextContent() + "}\n" + "\\newline\\newline\n";
					
				}
			}
			
			contenido+="\\end{document}";
			bw.append(contenido);
			bw.close();
		
		}catch (FileNotFoundException e) {
		// TODO Auto-generated catch block
			throw new AutomatasException(mensajero.devuelveMensaje("parser.noarchivo",2));
		} catch (SAXException e) {
		// TODO Auto-generated catch block
			throw new AutomatasException(mensajero.devuelveMensaje("parser.sax",2));
		} catch (IOException e) {
		// TODO Auto-generated catch block
			throw new AutomatasException(mensajero.devuelveMensaje("parser.entsalida",2));
		}
	}
	public void traducirPasosSimplificacion(String ruta){
		
		Mensajero mensajero=Mensajero.getInstancia();
		DOMParser parser = new DOMParser(); 
		String brr=new Character((char)92).toString();
		String rutaLatex=System.getProperty("user.dir")+brr+"LaTeX/FNG/"+brr+"FNG.tex";
		File fichero = new File (rutaLatex);
		BufferedWriter bw;
		PrintWriter pw = null;
		try{
			
			String contenido="";
    		FileWriter ficheroLat = new FileWriter(rutaLatex);
			pw = new PrintWriter(ficheroLat);
			
			
			parser.parse(new InputSource(new FileInputStream(ruta)));
			Document documento = parser.getDocument();
			
			bw = new BufferedWriter(new FileWriter(fichero));
			
			NodeList nodos1 = null;
			nodos1 = documento.getElementsByTagName("cabecera");
			contenido+=nodos1.item(0).getChildNodes().item(0).getTextContent();
			
			nodos1 = documento.getElementsByTagName("oculto");

			contenido+="\n"+ mensajero.devuelveMensaje("formatos.ocultar",5)+"{";
	
			for(int i =0; i < nodos1.getLength(); i++){
				NodeList noculto = nodos1.item(i).getChildNodes();

				contenido+="\\MYp{\\Huge " + 
				noculto.item(0).getChildNodes().item(0).getTextContent() + "}\n" + "\\newline\n";
				//contenido+=noculto.item(1).getTextContent()+ "\n";
				
				int tam = noculto.item(1).getChildNodes().getLength();
				
				contenido+="\\begin{center}"+"\\begin{tabular}{ m{15cm} }\n\n"+
				/*"\\hline*/"\n";
				for(int j = 0; j < tam; j++){
					
					contenido+= noculto.item(1).getChildNodes().item(j).getTextContent() + " \\\\" +"\n";
				}
				
				contenido+=/*"\\hline*/"\n"+"\\end{tabular}\n"+"\\end{center}\n";
				
			} 
			 contenido+="}\n";
			/***************************************************************************************/
			 contenido+=mensajero.devuelveMensaje("formatos.cabecerados",5);
			 
			 
			nodos1 = documento.getElementsByTagName("step");
			
			contenido+="\\MYp{\\Huge "+nodos1.item(0).getChildNodes().item(0).getTextContent()
			+"\\newline\n"+ "\\newline\n"+"}\n";
			
			int tam = nodos1.item(0).getChildNodes().item(1).getChildNodes().getLength();
			System.out.println("tam filas: " + tam);
			
			contenido+="\\begin{center}"+"\\begin{tabular}{ m{15cm} }\n\n"+
			/*"\\hline*/"\n";
			for(int j = 0; j < tam; j++){
				
				contenido+= nodos1.item(0).getChildNodes().item(1).getChildNodes().item(j).getTextContent() + " \\\\" +"\n";
			}
			
			contenido+=/*"\\hline*/"\n"+"\\end{tabular}\n"+"\\end{center}";
			
			
			
			contenido+="\\newpage\n";
			
			for(int i =1; i < nodos1.getLength(); i++){
				NodeList noculto = nodos1.item(i).getChildNodes();
				
				if(nodos1.item(i).getChildNodes().getLength() >1){					
					contenido+="\\MYp{\\Huge " + 
					noculto.item(0).getChildNodes().item(0).getTextContent() + "}\n" + "\\newline\n";
					//contenido+=noculto.item(1).getTextContent()+ "\n";
					
					int tamano = noculto.item(1).getChildNodes().getLength();
					
					contenido+="\\begin{center}"+"\\begin{tabular}{ m{15cm} }\n\n"+
					/*"\\hline*/"\n";
					for(int j = 0; j < tamano; j++){
						
						contenido+= noculto.item(1).getChildNodes().item(j).getTextContent() + " \\\\" +"\n";
					}
					
					contenido+=/*"\\hline*/"\n"+"\\end{tabular}\n"+"\\end{center}\n";
					
				}
				else{
					
					NodeList nodotabla = noculto.item(0).getChildNodes();
					int lon = nodotabla.getLength();
					System.out.println("lon: " + lon);
					String lat = "\\begin{center}\n" + "\\begin{tabular}{||";
					for(int k = 0; k <lon; k++){
						lat += "c||";
					}
					lat += "}\n";
					lat+="\\hline\n" + 
				       "\\hline\n";
					
					for(int n = 0; n < lon; n++){
						NodeList nodofila = nodotabla.item(n).getChildNodes();
					//	System.out.println("nodofila:" + nodotabla.item(n).getTextContent());
					/*	System.out.println("nodotabla.item(n).getChildNodes().getLength()" +
								nodotabla.item(n).getChildNodes().getLength());*///12
						for(int m = 0; m < nodotabla.item(n).getChildNodes().getLength(); m++){
					/*		System.out.println("itemfila:" + 
									nodofila.item(m).getTextContent());*/
						
							lat += " " + nodofila.item(m).getTextContent() + " ";
							if(m == lon -1) lat += "\\\\ \n"+"\\hline\n" + 
								"\\hline\n";
							else lat +=  "&" ;
						}
					}
					
					contenido+=lat;
					contenido += "\\end{tabular}\n" + "\\end{center}\n";// +
				       /*"\\newline\n" +
				       "\\newline\n" +*//*
				       "\n";*/
					//contenido+=lat;
					
				}
			}
			
			contenido+="\\end{document}";
			bw.append(contenido);
			bw.close();
		
		} catch (FileNotFoundException e) {
		// TODO Auto-generated catch block
			new AutomatasException(mensajero.devuelveMensaje("parser.noarchivo",2));
		} catch (SAXException e) {
		// TODO Auto-generated catch block
			e.printStackTrace();
			new AutomatasException(mensajero.devuelveMensaje("parser.sax",2));
		} catch (IOException e) {
		// TODO Auto-generated catch block
			new AutomatasException(mensajero.devuelveMensaje("parser.entsalida",2));
		}
		
		System.out.println("latex fng guardado en: " + rutaLatex);
	}
	}
